import{_ as e,c as t,o as a,d as i}from"./app.2e4d6f27.js";const f=JSON.parse('{"title":"Websites","description":"","frontmatter":{},"headers":[{"level":2,"title":"Keyboard tips","slug":"keyboard-tips"},{"level":3,"title":"What is focus!","slug":"what-is-focus"},{"level":3,"title":"Examples \u203C","slug":"examples-\u203C"},{"level":2,"title":"Interactions","slug":"interactions"},{"level":2,"title":"Link descriptions","slug":"link-descriptions"},{"level":2,"title":"Colour contrast","slug":"colour-contrast"}],"relativePath":"formats/websites.md"}'),s={name:"formats/websites.md"},o=i('<h1 id="websites" tabindex="-1">Websites <a class="header-anchor" href="#websites" aria-hidden="true">#</a></h1><p>Brief introduction on the basics of accessibility testing in Websites</p><h2 id="keyboard-tips" tabindex="-1">Keyboard tips <a class="header-anchor" href="#keyboard-tips" aria-hidden="true">#</a></h2><p>The easiest way to check accessibility in Websites is by using the keys <code>tab</code> and <code>shift + tab</code>. <code>tab</code> moves the current focusable element forward and <code>shift + tab</code> moves in backwards. Depending on the interactive element, you can use <code>return</code> or <code>space bar</code> to select or trigger an element.</p><ul><li><code>Buttons</code> can use both <code>return</code> or <code>space bar</code> to trigger elements.</li><li><code>Links</code> only take <code>return</code> as input to trigger elements. </li></ul><h3 id="what-is-focus" tabindex="-1">What is focus! <a class="header-anchor" href="#what-is-focus" aria-hidden="true">#</a></h3><p>&quot;Focus determines where keyboard events go in the page at any given moment. For instance, if you focus a text input field and begin typing, the input field receives the keyboard events and displays the characters you type,&quot; <a href="https://web.dev/focus/" target="_blank" rel="noopener noreferrer">quote from web.dev</a>.</p><p>Focusable elements are:</p><ol><li>Buttons</li><li>Links</li><li>Radio Buttons</li><li>Check boxes </li></ol><p>Elements that should not have focus:</p><ol><li>Text</li><li>Images (unless there is a link in the image)</li></ol><h3 id="examples-\u203C" tabindex="-1">Examples \u203C <a class="header-anchor" href="#examples-\u203C" aria-hidden="true">#</a></h3><ol><li>We created a simple but good example to illustrate <a href="https://csps-riw.github.io/tab-order/" target="_blank" rel="noopener" title="open in a new tab">the correct way of tab order</a>.</li><li>We also created a page that illustrates <a href="https://csps-riw.github.io/tab-order/wrong-order.html" target="_blank" rel="noopener" title="open in a new tab">the pains of a bad tab order</a>. </li></ol><h2 id="interactions" tabindex="-1">Interactions <a class="header-anchor" href="#interactions" aria-hidden="true">#</a></h2><h2 id="link-descriptions" tabindex="-1">Link descriptions <a class="header-anchor" href="#link-descriptions" aria-hidden="true">#</a></h2><h2 id="colour-contrast" tabindex="-1">Colour contrast <a class="header-anchor" href="#colour-contrast" aria-hidden="true">#</a></h2>',16),r=[o];function n(l,c,d,h,u,p){return a(),t("div",null,r)}var m=e(s,[["render",n]]);export{f as __pageData,m as default};
